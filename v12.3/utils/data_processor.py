

import pandas as pd
from typing import List, Dict, Any

def process_raw_dialogue_data(raw_data: List[Dict[str, Any]]) -> pd.DataFrame:
    """
    Processes raw dialogue data into a structured DataFrame.
    """
    processed_records = []
    for entry in raw_data:
        dialogue_id = entry.get("dialogue_id")
        final_reward = entry.get("final_reward")
        
        for turn_idx, turn in enumerate(entry.get("dialogue", [])):
            processed_records.append({
                "dialogue_id": dialogue_id,
                "turn_idx": turn_idx,
                "speaker": turn.get("speaker"),
                "text": turn.get("text"),
                "final_reward": final_reward # Attach final reward to each turn for simplicity
            })
    return pd.DataFrame(processed_records)

def filter_dialogues_by_reward(dataframe: pd.DataFrame, min_reward: float) -> pd.DataFrame:
    """
    Filters dialogues based on a minimum final reward.
    """
    high_reward_dialogue_ids = dataframe[dataframe["final_reward"] >= min_reward]["dialogue_id"].unique()
    return dataframe[dataframe["dialogue_id"].isin(high_reward_dialogue_ids)]

# Example usage:
# if __name__ == "__main__":
#     # Assuming you have a synthetic_dialogue_data.json generated by dataset_generator.py
#     from data_loader import load_dialogue_data
#     raw_data = load_dialogue_data("./synthetic_dialogue_data.json")
#     if raw_data:
#         df = process_raw_dialogue_data(raw_data)
#         print("Processed DataFrame head:")
#         print(df.head())

#         filtered_df = filter_dialogues_by_reward(df, 0.7)
#         print("\nFiltered DataFrame head (min_reward=0.7):")
#         print(filtered_df.head())


